import type { LiteUser, MisskeyUser } from "./user";

/**
 * Options to modify the standing of a remote server.
 */
export type ServerStatusOptions = {
    /**
     * Whether or not to continue accepting posts from the remote server.
     */
    defederate?: boolean;
    /**
     * Whether or not to force-classify all notes & files as NSFW.
     */
    nsfw?: boolean;
    /**
     * A mod-note to be left on the server's record, visible only to other administrators.
     */
    modNote?: string;
};

/**
 * Methods to sort & find invites.
 */
export type InviteListOptions = {
    /**
     * limit how many invites you retrieve. Range is [1..100].
     */
    limit?: number;
    /**
     * How many invites to skip over.
     */
    offset?: number;
    /**
     * The type of invite to look for.
     */
    type?: "unused" | "used" | "expired" | "all";
    /**
     * How to sort the invites.
     */
    sort?: "+createdAt" | "-createdAt" | "+usedAt" | "-usedAt";
};

/**
 * An invite generated by misskey.
 */
export type Invite = {
    /**
     * The system-generated ID of the invite.
     */
    id: string;
    /**
     * The code used by the user to join the instance.
     */
    code: string;
    /**
     * The Date-Time stamp of when the invite expires.
     */
    expiresAt: string;
    /**
     * The Date-Time stamp of when the invite was created.
     */
    createdAt: string;
    /**
     * The user that created the invite.
     */
    createdBy: LiteUser;
    /**
     * The user that used the invite, if applicable.
     */
    usedBy: LiteUser | null;
    /**
     * The Date-Time string of when the invite was used.
     */
    usedAt: string | null;
    /**
     * Whether or not the invite was used.
     */
    used: boolean;
}[];

/**
 * The type of report.
 */
type ReportType = "combined" | "local" | "remote";

/**
 * Options to determine which reports are fetched, and how they're sorted.
 */
export type ReportOptions = {
    /**
     * The amount of reports to retrieve. Range is [1..100].
     */
    limit: number;
    /**
     * Get reports AFTER the report id inputted.
     */
    sinceId: string;
    /**
     * Get reports BEFORE the report id inputted.
     */
    untilId: string;
    /**
     * The state of the report.
     */
    state: "resolved" | "unresolved" | "all";
    /**
     * If the report came from a local or remote user.
     */
    reporterOrigin: ReportType;
    /**
     * If the report is targeting a local or remote user.
     */
    targetUserOrigin: ReportType;
    /**
     * Whether or not the report has been forwarded or not.
     */
    forwarded: boolean;
};

/**
 * Options to modify the announcement.
 */
export type AnnouncementOptions = {
    /**
     * a URL (Not drive ID) to add, for a pop of color.
     */
    imageUrl?: string | null;
    /**
     * The icon used to display importance.
     */
    icon?: "info" | "warning" | "error" | "success";
    /**
     * The type of announcement. Normal will make an icon appear by the announcement,
     * banner will make a banner appear at the top of the page,
     * and dialog will make an intrusive popup appear that forces confirmation.
     */
    display?: "normal" | "banner" | "dialog";
    /**
     * Whether or not the announcement is meant only for existing users, or if new users can see it as well.
     */
    forExistingUsers?: boolean;
    /**
     * Whether or not the announcement will notify new users.
     */
    silence?: boolean;
    /**
     * Forces a separate dialog box prompting to make sure that the user understood the contents.
     */
    needConfirmationToRead?: boolean;
    /**
     * If the report is targeted at a specific user, enter their ID.
     */
    userId?: string;
};
/**
 * An Announcement.
 */
export type Announcement = {
    /**
     * the ID of the announcement, as generated by the home server.
     */
    id: string;
    /**
     * When the announcement was first created at.
     */
    createdAt: string;
    /**
     * When the announcement was last updated.
     */
    updatedAt: string;
    /**
     * The title of the announcement.
     */
    title: string;
    /**
     * The content of the announcement
     */
    text: string;
    /**
     * A publicly accessible URL to a photo that's displayed with the announcement
     */
    imageUrl: string;
};

/**
 * A raw report object, as defined by misskey.
 * You should not be accessing this raw. If you need to, then open an issue.
 */
export type Report = {
    /**
     * the ID of the report, as generated by the system.
     */
    id: string;
    /**
     * When the report was created, or first observed by the home server.
     */
    createdAt: string;
    /**
     * the text that is provided with the report.
     */
    comment: string;
    /**
     * Whether or not the report has been resolved and cannot be further dealt with.
     */
    resolved: boolean;
    /**
     * the ID of the reporter. For remote servers, this'll commonly be the instance.actor user.
     */
    reporterId: string;
    /**
     * The ID of target of the report, a.k.a the "accused" user.
     */
    targetUserId: string;
    /**
     * The ID of the person who resolved the report.
     */
    assigneeId: string;
    /**
     * The reporter. For remote servers, this'll commonly be the instance.actor user.
     */
    reporter: MisskeyUser;
    /**
     * The target of the report, a.k.a the "accused" user.
     */
    targetUser: MisskeyUser;
    /**
     * The user who resolved the report.
     */
    assignee: MisskeyUser;
};

export type AdvertisementOptions = {
    /**
     * The memo added for administrators & moderators to see.
     */
    memo?: string | null;
    /**
     * The placement of the advertisement.
     */
    place?: "square" | "horizontal" | "horizontal-big";
    /**
     * The days of the week that the advertisement will be shown.
     */
    dayOfWeek?: number; // I don't understand the numbers here...
    /**
     * The ratio this advertisement will be shown, in compared with other servers.
     */
    ratio?: number;
    /**
     * the Date-Time string for when the advertisement is created.
     */
    startsAt: number;
    /**
     * The Date-Time string for when the advertisement is to expire.
     */
    expiresAt: number;
    /**
     * The priority of the advertisement. Currently is just "middle".
     */
    priority: "middle";
};
